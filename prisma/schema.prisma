// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @db.String
  email String @unique @db.String
  password String @map("password_hash") @db.String
  avatarUrl String? @map("avatar_url") @db.String
  level Int @default(1) @db.Int
  xp Int @default(0) @db.Int
  streak Int @default(0) @db.Int
  lastLearningDate DateTime? @map("last_learning_date")
  totalWordsLearned Int @default(0) @map("total_words_learned") @db.Int
  dailyGoal Int @default(20) @map("daily_goal") @db.Int
  difficultyPreference String @default("intermediate") @map("difficulty_preference") @db.String
  notificationsEnabled Boolean @default(true) @map("notifications_enabled") @db.Bool
  publicProfile Boolean @default(false) @map("public_profile") @db.Bool
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  status String @default("active") @map("status") @db.String
  
  tokens RefreshToken[]
  vocabularies Vocabulary[] @relation("CreatedVocabularies")
  studySets StudySet[] @relation("CreatedStudySets")
  likedStudySets UserLikesStudySet[]
  categories Category[]
  vocabularyProgress UserVocabularyProgress[]
}

model RefreshToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  token String @unique
  userId String @db.ObjectId
  expiresAt DateTime
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model StudySet {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String?
  level Level @default(BEGINNER)
  tags String[] @db.String
  isPublic Boolean @default(false) @map("is_public")
  likesCount Int @default(0) @map("likes_count")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  author   User     @relation("CreatedStudySets", fields: [authorId], references: [id])
  authorId String   @db.ObjectId

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId
  
  vocabularies Vocabulary[]
  likedBy      UserLikesStudySet[]
  
  @@index([authorId, categoryId])
}

model Vocabulary {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  word String @db.String
  pronunciation String? @db.String
  meaning String @db.String // tiếng Việt
  definition String? @db.String  // tiếng Anh
  example String? @db.String 
  imageUrl String? @map("image_url") @db.String
  audioUrl String? @map("audio_url") @db.String
  partOfSpeech PartOfSpeech @default(OTHER) @map("part_of_speech")
  alternativePartOfSpeech PartOfSpeech[] @default([]) @map("alternative_part_of_speech")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // References
  studySetId String @db.ObjectId
  createdById String @map("created_by") @db.ObjectId

  // Relationships
  studySet StudySet @relation(fields: [studySetId], references: [id])
  createdBy User @relation("CreatedVocabularies", fields: [createdById], references: [id])
  vocabularyProgress UserVocabularyProgress[]
  @@unique([word, studySetId])
}



model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  imageUrl    String?    @map("image_url")
  icon        String
  color       String
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  
  studySets   StudySet[]

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  @@unique([name, authorId])
}



model VerificationCode {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique @db.String
  code  String @db.String
  type  VerificationType

  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([email, type])
  @@index([expiresAt])
}


model UserLikesStudySet {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @db.ObjectId
  studySet   StudySet @relation(fields: [studySetId], references: [id], onDelete: Cascade)
  studySetId String   @db.ObjectId
  createdAt  DateTime @default(now())

  @@unique([userId, studySetId])
}

model UserVocabularyProgress {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  vocabularyId   String   @db.ObjectId
  status         String   @default("new") // new, review, mastered
  lastReviewedAt DateTime?
  nextReviewAt   DateTime?
  reviewCount    Int      @default(0)
  correctCount   Int      @default(0)
  incorrectCount Int      @default(0)
  easeFactor     Float    @default(2.5)
  interval       Int      @default(1) // số ngày giữa các lần ôn
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user        User       @relation(fields: [userId], references: [id])
  vocabulary  Vocabulary @relation(fields: [vocabularyId], references: [id])

  @@unique([userId, vocabularyId])
  @@index([userId, nextReviewAt])
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}
enum VerificationType {
  REGISTER
  FORGOT_PASSWORD
}

enum PartOfSpeech {
  NOUN
  VERB
  ADJECTIVE
  ADVERB
  PRONOUN
  PREPOSITION
  CONJUNCTION
  INTERJECTION
  DETERMINER
  OTHER
}
